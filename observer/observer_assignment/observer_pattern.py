# -*- coding: utf-8 -*-
"""observer_pattern.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/15txMQ0n6JMkuoL0FN_PeF-0Z2Ug_HAvb
"""

from abc import ABC, abstractmethod

class IBidder(ABC):
  def update(self, bidder: str, amount: float):
    pass
  #def getBidderName(self):
  #  pass

class Bidder(IBidder):
  def __init__(self, bidder):
    self._bidder = bidder

  def getBidderName(self):
    return self._bidder
  
  def update(self, bidder, amount):
    print('{}\'s screen : '.format(self._bidder))
    if self._bidder == bidder:
      print('{} is the highest bidder now with a bidding amount of {} tk'.format(bidder, str(amount)))
    else:
      print('current bid amount of {} is {}'.format(bidder, amount))

class BiddingContext:
  
  def __init__(self):
    self.bidders = []
    self.price = 0
    self.highest_bidder = ''

  def setBid(self, bidder, amount):
    if amount <= self.price:
      print('{} tk is less than or equal to the current price {} tk'.format(amount, self.price))
    else:
      self.price = amount
      self.highest_bidder = bidder
      self.notify(bidder, amount)
  
  def notify(self, bidder, amount):
    print('an update has been found')

    for bdr in self.bidders:
      bdr.update(bidder, amount)

  def attach(self, bidder):
    self.bidders.append(bidder)

  def detach(self, bidder):
    print(bidder)
    print(self.bidders)
    for bdr in self.bidders:
      if bdr.getBidderName() == bidder.getBidderName():
        self.bidders.remove(bdr)
        print('{} has been removed'.format(bdr.getBidderName()))
        break
      else:
        print('no such bidder found')

  def viewLeaderBoard(self):
    print('{} is the highest bidder with {} tk'.format(self.highest_bidder, self.price))
    
    '''
    if bidder in self.bidders:
      self.bidders.remove(bidder)
      print('{} has been removed'.format(bidder.getBidderName()))  
    else:
      print('not found')
    '''

class Auction:
  
  def __init__(self):
    self._context = BiddingContext()
  
  def start(self):
    choice = 0

    while choice != 4:
      print('1.add bidder\n2.remove bidder\n3.view bidders list\n4.bid')
      choice = int(input())

      if choice == 1:
        name = input('bidder\'s name: ')
        bidder = Bidder(name)
        self._context.attach(bidder)
      
      elif choice == 3:
        print('bidder\'s list: ')
        for bidder in self._context.bidders:
          print(bidder.getBidderName())

      elif choice == 2:
        name = input('bidder\'s name: ')
        bidder = Bidder(name)
        self._context.detach(bidder)

    choice = 0
    print('bidding process has started')
    
    while choice != 2:
      choice = int(input('1.make a bid\n2.end\n3.view leader board\n'))

      if choice == 1:
        name = input('bidder name: ')

        for bidder in self._context.bidders:
          if name == bidder.getBidderName():
            amount = int(input('biding amount : '))
            self._context.setBid(name, amount)
            break
        else:
          print('no such bidder found')  
        
        '''
        if name not in bidder.getBidderName() for bidder in self._context.bidders:
          print('no sudh bidder found')
        else:
          amount = int(input('biding amount : '))
          self._context.setBid(name, amount)
        '''
              
      elif choice == 2:
        if self._context.price == 0:
          print('***item unsold***')
        else:
          print('item has been sold to {} for {} tk'.format(self._context.highest_bidder, self._context.price)) 
      
      elif choice == 3:
        self._context.viewLeaderBoard()

if __name__ == '__main__':
  auction = Auction()
  auction.start()
